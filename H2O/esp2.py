#!/usr/bin/env python

"""
usage:
ubuntu@ubuntu:~$ mayavi2 -n -x esp2.py

files used in this script:
CHGCAR & LOCPOT, both generated by vasp.
The last few lines in CHGCAR were discarded.

main sources:
dft-book
http://docs.enthought.com/mayavi/mayavi/auto/example_atomic_orbital.html#example-atomic-orbital

"""

import numpy as np
from enthought.mayavi import mlab

# data below can be read from CHGCAR file.
nd = 84
a = 9.0

# Load the data, we need to remove the first 12 lines and the '\n'
str = ' '.join(file('CHGCAR').readlines()[12:])
rho_ravel = np.fromstring(str, sep=' ')
rho = np.empty((nd,nd,nd))
for i in xrange(nd):
  for j in xrange(nd):
    for k in xrange(nd):
      rho[k][j][i] = rho_ravel[k*nd*nd+j*nd+i]

#rho.shape = (nd, nd, nd)

str = ' '.join(file('LOCPOT').readlines()[12:])
esp_ravel = np.fromstring(str, sep=' ')
esp = np.empty((nd,nd,nd))
for i in xrange(nd):
  for j in xrange(nd):
    for k in xrange(nd):
      esp[k][j][i] = esp_ravel[k*nd*nd+j*nd+i]

#esp.shape = (nd, nd, nd)

mlab.figure(1, fgcolor=(1, 1, 1), bgcolor=(0, 0, 0))

"""
# Plot the atoms and the bonds

ps = np.array([[ 4.5       ,  4.5       ,  4.67996527],
       [ 4.5       ,  4.95924151,  4.32057102],
       [ 4.5       ,  4.04075849,  4.32057102]])

atom_1, atom_2, atom_3 = ps*nd/a

O = mlab.points3d(atom_1[0], atom_1[1], atom_1[2],
                  scale_factor=3,
                  resolution=20,
                  color=(1, 0, 0),
                  scale_mode='none')

H1 = mlab.points3d(atom_2[0], atom_2[1], atom_2[2],
                   scale_factor=2,
                   resolution=20,
                   color=(1, 1, 1),
                   scale_mode='none')

H2 = mlab.points3d(atom_3[0], atom_3[1], atom_3[2],
                   scale_factor=2,
                   resolution=20,
                   color=(1, 1, 1),
                   scale_mode='none')
"""

# create a scalar field with the rho as the scalar
src = mlab.pipeline.scalar_field(rho)

# add the `esp` as an additional array
src.image_data.point_data.add_array(esp.ravel())#(esp_ravel) #(esp.T.ravel())

# give a name to our new dataset.
src.image_data.point_data.get_array(1).name = 'esp'

# The dataset should be up to date with the different arrays:
src.image_data.point_data.update()

# select the 'scalar' attribute
src2 = mlab.pipeline.set_active_attribute(src, point_scalars='scalar')

# Cut isosurfaces of the scalar
contour = mlab.pipeline.contour(src2)

# select the 'esp' attribute,
contour2 = mlab.pipeline.set_active_attribute(contour, point_scalars='esp')

# display the surface. The colormap is the current attribute: the phase.
mlab.pipeline.surface(contour2, transparent=True) #, colormap='hsv')

mlab.colorbar(title='ESP', orientation='vertical', nb_labels=5)
mlab.savefig('images/H2O-esp.png')
mlab.show()
